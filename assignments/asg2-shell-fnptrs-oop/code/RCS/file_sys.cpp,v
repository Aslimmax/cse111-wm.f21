head	1.20;
access;
symbols;
locks;
comment	@// @;


1.20
date	2021.10.30.11.36.13;	author -;	state -;
branches;
next	1.19;

1.19
date	2021.10.30.08.14.20;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.10.30.06.28.45;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.10.30.00.35.41;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.10.29.23.51.43;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.10.29.20.30.54;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.10.29.19.45.52;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.10.28.02.15.14;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.10.28.00.42.59;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.10.27.22.19.03;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.04.10.21.23.40;	author -;	state -;
branches;
next	1.9;

1.9
date	2020.10.27.04.32.08;	author -;	state -;
branches;
next	1.8;

1.8
date	2020.10.22.21.37.26;	author -;	state -;
branches;
next	1.7;

1.7
date	2019.07.09.21.05.44;	author -;	state -;
branches;
next	1.6;

1.6
date	2018.06.27.21.44.57;	author -;	state -;
branches;
next	1.5;

1.5
date	2016.01.15.00.16.52;	author -;	state -;
branches;
next	1.4;

1.4
date	2016.01.14.22.45.21;	author -;	state -;
branches;
next	1.3;

1.3
date	2016.01.14.00.21.53;	author -;	state -;
branches;
next	1.2;

1.2
date	2016.01.13.21.49.20;	author -;	state -;
branches;
next	1.1;

1.1
date	2016.01.13.21.34.03;	author -;	state -;
branches;
next	;


desc
@@


1.20
log
@-
@
text
@// $Id: file_sys.cpp,v 1.19 2021-10-30 01:14:20-07 - - $

#include <cassert>
#include <iostream>
#include <stdexcept>

using namespace std;

#include "debug.h"
#include "file_sys.h"

size_t inode::next_inode_nr {1};

ostream& operator<< (ostream& out, file_type type) {
   switch (type) {
      case file_type::PLAIN_TYPE: out << "PLAIN_TYPE"; break;
      case file_type::DIRECTORY_TYPE: out << "DIRECTORY_TYPE"; break;
      default: assert (false);
   };
   return out;
}

inode_state::inode_state() {
   // Make an inode pointer
   inode_ptr directoryPtr = 
      make_shared<inode>(file_type::DIRECTORY_TYPE);

   // Set root and CWD to the new pointer (on first init)
   root = directoryPtr;
   cwd = root;

   // Set the correct string paths for root and cwd
   root->contents->addDirectoryContent("..", root);
   root->contents->addDirectoryContent(".", cwd);

   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt() << "\"");
}

/**
 * Get the current prompt
 * Input: None
 * Output: string prompt
 */
const string& inode_state::prompt() const { return prompt_; }

/**
 * Change the prompt
 * Input: string of the new promopt
 * Output: none
 */
void inode_state::setPrompt(const string &newPrompt) {
   prompt_ = newPrompt;
}

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
}

/**
 * Get root of current state
 * Input: None
 * Output: inode_ptr to class member root
 */
inode_ptr inode_state::getRoot() const {
   return root;
}

/**
 * Get cwd of current state
 * Input: None
 * Output: inode_ptr to class member cwd
 */
inode_ptr inode_state::getCwd() const {
   return cwd;
}

/**
 * Get filepath of inode_state
 * Input: None
 * Output: string of the current path
 */
string inode_state::getFilepath() {
   string finalPathOutput = ""; // initiailize output path

   // Check if filepath is currently at the root
   if (filepath.empty()) {
      finalPathOutput += "/";
   } else {
      // Loop through filePath iterator
      for (vector<string>::const_iterator iter = filepath.begin(); 
         iter != filepath.end(); ++iter) {
         finalPathOutput += "/" + (*iter);
      }      
   }

   return finalPathOutput;
}

/**
 * Set the cwd
 * Input: inode_ptr to pointer to
 * Output: none
 */
void inode_state::setCwd(const inode_ptr& newPtr) {
   cwd = newPtr;
}

/**
 * Set filepath
 * Input: string new filepath
 * Output: none
 */
void inode_state::setFilepath(const string& newFilepath) {
   // Process the filepath string
   wordvec path = split(newFilepath, "/");

   // Copy words into filepath
   filepath = path;
}

/**
 * Push back a new path to filepath
 * Input: string new path to add
 * Output: none
 */
void inode_state::pushFilepath(const string& newFilepath) {
   filepath.push_back(newFilepath);
}

/**
 * Pop back the path at the end of filepath
 * Input: none
 * Output: none
 */
void inode_state::popFilepath() {
   filepath.pop_back();
}

/**
 * Clear the filepath vector
 * Input: None
 * Output: None
 */
void inode_state::resetFilePath() {
   filepath.clear();
}

/**
 * Overloaded inode constructor 
 * Input: file type
 * Output: None
 */
inode::inode(file_type type): inode_nr (next_inode_nr++) {
   switch (type) {
      case file_type::PLAIN_TYPE:
           contents = make_shared<plain_file>();
           fileType = type;
           break;
      case file_type::DIRECTORY_TYPE:
           contents = make_shared<directory>();
           fileType = type;
           break;
      default: assert (false);
   }
   DEBUGF ('i', "inode " << inode_nr << ", type = " << type);
}

/**
 * Get inode number
 * Input: None
 * Output: size_t unique inode number
 */
size_t inode::get_inode_nr() const {
   DEBUGF ('i', "inode = " << inode_nr);
   return inode_nr;
}

/**
 * Get base_file_ptr contents
 * Input: None
 * Output: base_file_ptr contents member
 */
base_file_ptr inode::getContents() const {
   return contents;
}

/**
 * Get file_type of contents
 * Input: None
 * Output: file_type
 */
file_type inode::getFileType() const {
   return fileType;
}

file_error::file_error (const string& what):
            runtime_error (what) {
}

void base_file::addDirectoryContent(const string&, const inode_ptr&) {
   throw file_error ("is a " + error_file_type());
}

map<string, inode_ptr> base_file::getDirents() const {
   throw file_error ("is a " + error_file_type());
}

wordvec base_file::getData() const {
   throw file_error ("is a " + error_file_type());
}

const wordvec &base_file::readfile() const {
   throw file_error ("is a " + error_file_type());
}

void base_file::writefile (const wordvec&) {
   throw file_error ("is a " + error_file_type());
}

void base_file::remove (const string&) {
   throw file_error ("is a " + error_file_type());
}

inode_ptr base_file::mkdir (const string&) {
   throw file_error ("is a " + error_file_type());
}

inode_ptr base_file::mkfile (const string&) {
   throw file_error ("is a " + error_file_type());
}

/**
 * Get the size of plain_file wordvec data
 * Input: none
 * Output: output of characters in data
 */
size_t plain_file::size() const {
   // Initailize size
   size_t size = 0;
   size_t numWords = 0; // initialze number of words counter

   // Loop through all elements in data
   for (wordvec::const_iterator iter = data.begin(); iter != data.end();
      ++iter) {
      // Increment size based on the length of the string in wordvec
      size += (*iter).length();
      numWords++;
   }

   // Calculate the number of characters in the file
   if (numWords != 0) {
      size = size + numWords - 1;

   }

   DEBUGF ('i', "size = " << size);
   return size;
}

/**
 * Return data
 * Input: none
 * Output: wordvec data
 */
const wordvec& plain_file::readfile() const {
   DEBUGF ('i', data);
   return data;
}

/**
 * Replace the content of data
 * Input: wordvec to replace current data
 * Output: none
 */
void plain_file::writefile (const wordvec& words) {
   DEBUGF ('i', words);
   data = words;
}

/**
 * Get data member of plain_file object
 * Input: none
 * Output: wordvec data
 */
wordvec plain_file::getData() const {
   return data;
}

/**
 * Add new file/directory to dirents
 * Input: string file/directory name, the cwd of that file/directory
 * Output: none
 */
void directory::addDirectoryContent(const string& filename, 
   const inode_ptr& inodePtr) {
   // Create a tempPair obj to insert into dirents
   pair<string, inode_ptr> tempPair(filename, inodePtr);
   // Insert into dirents
   dirents.insert(tempPair);
}

/**
 * Get dirents member from derviced class directory
 * Input: None
 * Output: map<string, inode_ptr> dirents member
 */
map<string, inode_ptr> directory::getDirents() const {
   return dirents;
}

/**
 * Get the number of entries in the directory
 * Input: None
 * Output: size_t number of entires in directory
 */
size_t directory::size() const {
   size_t size = dirents.size();
   // size_t size = 0; // initialize size to 0
   // for (map<string, inode_ptr>::iterator iter = getDirents().begin();
   //       iter != getDirents().end(); ++iter) {
   //    size++; // increment the size
   // }
   DEBUGF ('i', "size = " << size);
   // return size;
   return size;
}

/**
 * Remove the file/directory from dirents
 * Input: string name of the file/directory to be removed
 * Output: none
 */
void directory::remove (const string& filename) {
   DEBUGF ('i', filename);

   // Find the file
   map<string, inode_ptr>::iterator iter = dirents.find(filename);

   dirents.erase(iter);
}

/**
 * Create a new directory in dirents
 * Input: string name of the directory
 * Output: inode_ptr of the directory
 */
inode_ptr directory::mkdir (const string& dirname) {
   DEBUGF ('i', dirname);
   
   // Check if a directory or file called dirname already exists
   map<string, inode_ptr>::iterator iter = dirents.find(dirname);
   if (iter != dirents.end()) {
      return nullptr;
   }

   /* TODO:
   Add check for 'the complete pathname of the parent of this new
   directory does not already exist' */
   // Make a new inode_state obj
   // inode_state directoryToAdd;

   // Get the inode ptr
   // inode_ptr tempPtr = directoryToAdd.getCwd();
   inode_ptr inodePtr = make_shared<inode>(file_type::DIRECTORY_TYPE);

   // Add new directory to dirents
   addDirectoryContent(dirname, inodePtr);

   // Add . our new directory
   inodePtr->getContents()->addDirectoryContent(".", inodePtr);

   // Get the inode_ptr of the cwd
   iter = dirents.find(".");
   // Add .. to our new directory
   inodePtr->getContents()
      ->addDirectoryContent("..", iter->second);

   return inodePtr;
}

/**
 * Create a new file in dirents
 * Input: string name of the file
 * Output: inode_ptr of the directory
 */
inode_ptr directory::mkfile (const string& filename) {
   DEBUGF ('i', filename);
   
   // Check if a directory or file called filename already exists
   map<string, inode_ptr>::iterator iter = dirents.find(filename);
   if (iter != dirents.end()) { // Found the element
      // Ensure that the element is not a directory
      return iter->second;
   }
   
   // Make a new file obj to add to dirents
   // inode newFile(file_type::PLAIN_TYPE);
   inode_ptr filePtr = make_shared<inode>(file_type::PLAIN_TYPE);

   // Add the file to dirents
   addDirectoryContent(filename, filePtr);

   return filePtr;
}

@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.18 2021-10-29 23:28:45-07 - - $
d254 4
a257 1
   size = size + numWords - 1;
d375 2
a376 2
   // Get the inode_ptr of the root
   iter = dirents.find("..");
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.17 2021-10-29 17:35:41-07 - - $
d381 5
d400 1
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.16 2021-10-29 16:51:43-07 - - $
d85 1
a85 1
string inode_state::getFilepath() const {
d112 31
d152 1
a152 1
 * Overloaded inode constructor
d243 1
d250 1
d252 4
a255 1
   
d280 5
d289 5
d302 4
a305 4

/* Get dirents member from derived class directory
Input: None
Output: map<string, inode_ptr> dirents member
d311 4
a314 3
/* Get the number of entries in the directory
Input: None
Output: size_t number of entries in directory
d317 6
a322 5
   size_t size = 0; // initialize size to 0
   for (map<string, inode_ptr>::iterator iter = getDirents().begin();
         iter != getDirents().end(); ++iter) {
      size++; // increment the size
   }
d324 1
d328 5
d336 1
a336 1
   // Check if filename exists in dirents
a337 3
   if (iter == dirents.end()) { // filename has not been found
      return;
   }
d339 1
a339 5
   // Check if directory is empty
   if (iter->second->getContents()->getDirents().size() == 2) {
      // iter->second->setCwd(nullptr);
      dirents.erase(iter);
   }
d342 5
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.15 2021-10-29 13:30:54-07 - - $
d41 1
a41 1
 * Get the current promopt
d52 1
a52 1
void inode_state::prompt(const string &newPrompt) {
d62 5
a66 4
/* Get root of inode_state 
Input: None
Output: inode_ptr to class member root
*/
d71 5
a75 4
/* Get cwd of inode_state 
Input: None
Output: inode_ptr to class member cwd
*/
d80 45
d140 4
a143 3
/* Get inode number
Input: None
Output: size_t inode number
d150 4
a153 3
/* Get base_file_ptr contents
Input: None
output: base_file_ptr contents member
d159 4
a162 3
/* Get file_type of contents 
Input: None
Output: file_type
d204 4
a207 4

/* Get the size of plain_file wordvec data
Input: None
Output: number of characters in data
d224 4
a227 3
/* Return data
Input: None
Output: wordvec data (class member of plain_file) 
d234 4
a237 3
/* Replace the content of data
Input: wordvec to replace current data
Output: None
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.14 2021-10-29 12:45:52-07 - - $
d253 1
a253 1
   Add check for 'the complete pathname fo the parent of this new
d256 1
a256 1
   inode_state directoryToAdd;
d259 2
a260 1
   inode_ptr tempPtr = directoryToAdd.getCwd();
d263 1
a263 1
   addDirectoryContent(dirname, tempPtr);
d265 10
a274 1
   return tempPtr;
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.13 2021-10-27 19:15:14-07 - - $
d40 5
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.12 2021-10-27 17:42:59-07 - - $
d42 9
d152 2
a153 1
Output: number of characters in data*/
d169 4
d178 4
d184 1
d268 2
a269 2
      // // Ensure that the element is not a directory
      return nullptr;
d276 1
a276 1
   addDirectoryContent(filename, filePtr); 
d278 1
a278 1
   return nullptr;
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.11 2021-10-27 15:19:03-07 - - $
d116 4
d140 4
a143 1

d145 10
a154 1
   size_t size {0};
d168 4
d180 1
d246 6
a251 6
   // // Check if a directory or file called filename already exists
   // map<string, inode_ptr>::iterator iter = dirents.find(filename);
   // if (iter != dirents.end()) { // Found the element
   //    // // Ensure that the element is not a directory
   //    return nullptr;
   // }
d253 3
a255 3
   // // Make a new file obj to add to dirents
   // inode newFile(file_type::PLAIN_FILE);
   // inode_ptr filePtr = make_shared<inode>(newFile);
d257 1
a257 1
   // addDirectoryContent(filename, filePtr); 
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.10 2021-04-10 14:23:40-07 - - $
d68 1
d72 1
d95 8
d184 12
d200 6
d207 3
d213 2
a214 2
   // Set the cwd of directoryToAdd to dirname
   directoryToAdd
d216 2
a217 10
   // initialize string to hold file path of cwd
   string cwdFilePath = ""; 
   
   // Find the current path of the current directory
   // for (map<string, inode_ptr>::iterator iter = dirents.begin(); 
   //    iter != dirents.end(); ++iter) {
   //    if (iter->first == ".") { // found the cwd

   //    }
   // }
d219 1
a219 2
   // Set the correct string paths for root and cwd
   return nullptr;
d224 14
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.9 2020-10-26 21:32:08-07 - - $
d24 12
d48 16
d77 4
d86 7
d98 9
a106 1
const wordvec& base_file::readfile() const {
d142 20
d163 5
a167 1
   size_t size {0};
d178 19
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.8 2020-10-22 14:37:26-07 - - $
d16 2
a17 2
      case file_type::PLAIN_TYPE: cout << "PLAIN_TYPE"; break;
      case file_type::DIRECTORY_TYPE: cout << "DIRECTORY_TYPE"; break;
d44 1
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.7 2019-07-09 14:05:44-07 - - $
d3 1
a5 1
#include <unordered_map>
a13 6
struct file_type_hash {
   size_t operator() (file_type type) const {
      return static_cast<size_t> (type);
   }
};

d15 4
a18 3
   static unordered_map<file_type,string,file_type_hash> hash {
      {file_type::PLAIN_TYPE, "PLAIN_TYPE"},
      {file_type::DIRECTORY_TYPE, "DIRECTORY_TYPE"},
d20 1
a20 1
   return out << hash[type];
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.6 2018-06-27 14:44:57-07 - - $
d12 1
a12 1
int inode::next_inode_nr {1};
d53 1
a53 1
int inode::get_inode_nr() const {
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.5 2016-01-14 16:16:52-08 - - $
d63 21
a98 13
void plain_file::remove (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkdir (const string&) {
   throw file_error ("is a plain file");
}

inode_ptr plain_file::mkfile (const string&) {
   throw file_error ("is a plain file");
}


a102 8
}

const wordvec& directory::readfile() const {
   throw file_error ("is a directory");
}

void directory::writefile (const wordvec&) {
   throw file_error ("is a directory");
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.4 2016-01-14 14:45:21-08 - - $
d33 1
a33 1
const string& inode_state::prompt() { return prompt_; }
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.3 2016-01-13 16:21:53-08 - - $
d90 1
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.2 2016-01-13 13:49:20-08 - - $
d28 13
a115 11
}

inode_state::inode_state() {
   DEBUGF ('i', "root = " << root << ", cwd = " << cwd
          << ", prompt = \"" << prompt << "\"");
}

ostream& operator<< (ostream& out, const inode_state& state) {
   out << "inode_state: root = " << state.root
       << ", cwd = " << state.cwd;
   return out;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: file_sys.cpp,v 1.1 2016-01-13 13:34:03-08 - - $
d5 1
d14 15
a28 3
inode::inode(inode_t init_type):
   inode_nr (next_inode_nr++), type (init_type)
{
d30 1
a30 1
      case PLAIN_INODE:
d33 1
a33 1
      case DIR_INODE:
d45 3
a47 10
plain_file_ptr plain_file_ptr_of (file_base_ptr ptr) {
   plain_file_ptr pfptr = dynamic_pointer_cast<plain_file> (ptr);
   if (pfptr == nullptr) throw invalid_argument ("plain_file_ptr_of");
   return pfptr;
}

directory_ptr directory_ptr_of (file_base_ptr ptr) {
   directory_ptr dirptr = dynamic_pointer_cast<directory> (ptr);
   if (dirptr == nullptr) throw invalid_argument ("directory_ptr_of");
   return dirptr;
a49 1

d65 12
d83 8
d93 10
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: inode.cpp,v 1.12 2014-07-03 13:29:57-07 - - $
d9 1
a9 1
#include "inode.h"
@
